#!/usr/bin/env python3
"""
Bot de Pr√©diction Telegram v2024 - Version Compl√®te pour Render.com
Architecture 100% YAML - Aucune base de donn√©es PostgreSQL requise
Logique des As optimis√©e : 1 As premier groupe + 0 As deuxi√®me groupe
"""

import os
import asyncio
import re
import logging
import sys
import json
import zipfile
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from predictor import CardPredictor  
from yaml_manager import YAMLManager, init_database
from scheduler import PredictionScheduler
from aiohttp import web
import time

# Configuration des logs optimis√©e pour Render.com
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# Variables d'environnement
API_ID = int(os.getenv('API_ID', '0'))
API_HASH = os.getenv('API_HASH', '')
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
PORT = int(os.getenv('PORT', '10000'))
prediction_interval = int(os.getenv('PREDICTION_INTERVAL', '1'))

# Fichier de configuration
CONFIG_FILE = "bot_config.json"

# Variables d'√©tat globales
detected_stat_channel = None
detected_display_channel = None
predictor = CardPredictor()
scheduler = None
yaml_manager = None

# Client Telegram
session_name = f'bot_session_{int(time.time())}'
client = TelegramClient(session_name, API_ID, API_HASH)

def load_config():
    """Charge la configuration depuis le fichier JSON"""
    global detected_stat_channel, detected_display_channel, prediction_interval
    
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
                detected_stat_channel = config.get('stat_channel')
                detected_display_channel = config.get('display_channel')
                prediction_interval = config.get('prediction_interval', 1)
                logger.info(f"‚úÖ Configuration charg√©e: Stats={detected_stat_channel}, Display={detected_display_channel}, Intervalle={prediction_interval}min")
                return True
    except Exception as e:
        logger.error(f"Erreur chargement config: {e}")
    
    return False

def save_config():
    """Sauvegarde la configuration dans le fichier JSON"""
    try:
        config = {
            'stat_channel': detected_stat_channel,
            'display_channel': detected_display_channel,
            'prediction_interval': prediction_interval
        }
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=2)
        logger.info("‚úÖ Configuration sauvegard√©e")
        return True
    except Exception as e:
        logger.error(f"Erreur sauvegarde config: {e}")
        return False

# Health check pour Render.com
async def health_check(request):
    """Health check endpoint pour Render.com"""
    return web.Response(text=f"‚úÖ Bot Telegram Pr√©diction v2024 - Port {PORT} - Running OK!", status=200)

async def bot_status_endpoint(request):
    """Endpoint de statut d√©taill√©"""
    try:
        status = {
            "bot_online": True,
            "port": PORT,
            "stat_channel": detected_stat_channel,
            "display_channel": detected_display_channel,
            "prediction_interval": prediction_interval,
            "predictions_active": len(predictor.prediction_status),
            "scheduler_running": scheduler.is_running if scheduler else False,
            "yaml_database": "active",
            "timestamp": datetime.now().isoformat()
        }
        return web.json_response(status)
    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)

# --- COMMANDES TELEGRAM ---

@client.on(events.NewMessage(pattern='/start'))
async def start_command(event):
    """Commande de d√©marrage"""
    welcome_msg = f"""üéØ **Bot de Pr√©diction v2024 - Bienvenue !**

üîπ **Architecture YAML Pure** - Plus de PostgreSQL
üîπ **Logique As Optimis√©e** - 1 As premier + 0 As deuxi√®me groupe
üîπ **Port {PORT}** - Configur√© pour Render.com

**Fonctionnalit√©s** :
‚Ä¢ Pr√©dictions automatiques avec logique des As
‚Ä¢ V√©rification des r√©sultats avec statuts d√©taill√©s
‚Ä¢ Configuration flexible de l'intervalle de pr√©diction
‚Ä¢ Architecture YAML compl√®te et autonome

**Commandes Administrateur** :
‚Ä¢ `/status` - √âtat complet du syst√®me
‚Ä¢ `/intervalle [1-60]` - Configurer d√©lai pr√©diction
‚Ä¢ `/deploy` - G√©n√©rer package de d√©ploiement

Le bot est pr√™t ! üöÄ"""
    
    await event.respond(welcome_msg)
    logger.info(f"Message bienvenue envoy√© √† {event.sender_id}")

@client.on(events.NewMessage(pattern='/status'))
async def status_command(event):
    """Affiche le statut complet du syst√®me"""
    if event.sender_id != ADMIN_ID:
        return
    
    try:
        # Statistiques du scheduler
        if scheduler:
            sched_stats = scheduler.get_statistics()
            sched_status = f"""üìä **Planificateur**:
‚Ä¢ √âtat: {'üü¢ Actif' if sched_stats['is_running'] else 'üî¥ Inactif'}
‚Ä¢ Total planifi√©: {sched_stats['total_scheduled']}
‚Ä¢ Lanc√©es: {sched_stats['launched']}
‚Ä¢ V√©rifi√©es: {sched_stats['verified']}
‚Ä¢ En attente: {sched_stats['pending']}
‚Ä¢ Taux r√©ussite: {sched_stats['success_rate']:.1f}%"""
        else:
            sched_status = "üìä **Planificateur**: Non initialis√©"
        
        # Statistiques du pr√©dicteur
        pred_stats = predictor.get_statistics()
        pred_status = f"""üéØ **Pr√©dicteur**:
‚Ä¢ Total pr√©dictions: {pred_stats['total']}
‚Ä¢ R√©ussites: {pred_stats['wins']} ‚úÖ
‚Ä¢ √âchecs: {pred_stats['losses']} ‚ùå
‚Ä¢ En attente: {pred_stats['pending']} ‚è≥
‚Ä¢ Taux r√©ussite: {pred_stats['win_rate']:.1f}%"""
        
        status_msg = f"""üìä **√âtat du Bot v2024**

üåê **Configuration**:
‚Ä¢ Canal statistiques: {'‚úÖ' if detected_stat_channel else '‚ùå'} ({detected_stat_channel})
‚Ä¢ Canal affichage: {'‚úÖ' if detected_display_channel else '‚ùå'} ({detected_display_channel})
‚Ä¢ Port serveur: {PORT}
‚Ä¢ Intervalle pr√©diction: {prediction_interval} minute(s)

{sched_status}

{pred_status}

üîß **Architecture**:
‚Ä¢ Base donn√©es: YAML (autonome)
‚Ä¢ Logique As: 1 premier + 0 deuxi√®me groupe
‚Ä¢ Version: v2024 Render.com"""
        
        await event.respond(status_msg)
        
    except Exception as e:
        logger.error(f"Erreur status: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern=r'/intervalle (\d+)'))
async def set_prediction_interval(event):
    """Configure l'intervalle de pr√©diction"""
    if event.sender_id != ADMIN_ID:
        return
        
    try:
        global prediction_interval
        new_interval = int(event.pattern_match.group(1))
        
        if 1 <= new_interval <= 60:
            old_interval = prediction_interval
            prediction_interval = new_interval
            
            # Sauvegarder la configuration
            save_config()
            
            await event.respond(f"""‚úÖ **Intervalle de Pr√©diction Mis √† Jour**

‚è±Ô∏è **Ancien**: {old_interval} minute(s)
‚è±Ô∏è **Nouveau**: {prediction_interval} minute(s)

Le syst√®me utilisera maintenant ce nouvel intervalle pour espacer les pr√©dictions automatiques.

Configuration sauvegard√©e automatiquement.""")
            
            logger.info(f"‚úÖ Intervalle mis √† jour: {old_interval} ‚Üí {prediction_interval} minutes")
        else:
            await event.respond("‚ùå **Erreur**: L'intervalle doit √™tre entre 1 et 60 minutes")
            
    except ValueError:
        await event.respond("‚ùå **Erreur**: Veuillez entrer un nombre valide")
    except Exception as e:
        logger.error(f"Erreur set_prediction_interval: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

# Messages handler principal avec logique As
@client.on(events.NewMessage())
@client.on(events.MessageEdited())
async def handle_messages(event):
    """Gestionnaire principal des messages"""
    try:
        message_text = event.message.message if event.message else ""
        channel_id = event.chat_id
        
        # V√©rifier si c'est le bon canal
        if detected_stat_channel and channel_id == detected_stat_channel:
            logger.info(f"‚úÖ Message du canal stats: {message_text[:100]}")
            
            # Logique de pr√©diction avec analyse des As
            should_predict, game_number, suit = predictor.should_predict(message_text)
            if should_predict and game_number and suit:
                prediction_text = f"üîµ{game_number} üîµ3D: {suit} :‚è≥"
                logger.info(f"üéØ Pr√©diction g√©n√©r√©e: {prediction_text}")
                
                # Diffuser la pr√©diction si canal configur√©
                if detected_display_channel:
                    try:
                        await client.send_message(detected_display_channel, prediction_text)
                        logger.info(f"üì§ Pr√©diction diffus√©e sur canal {detected_display_channel}")
                    except Exception as e:
                        logger.error(f"Erreur diffusion: {e}")
            
            # V√©rification des r√©sultats
            verified, number = predictor.verify_prediction(message_text)
            if verified is not None and number is not None:
                status = predictor.prediction_status.get(number, '‚ùå')
                logger.info(f"üîç V√©rification jeu #{number}: {status}")
                
        else:
            logger.debug(f"Message ignor√© - Canal {channel_id} ‚â† Stats {detected_stat_channel}")
            
    except Exception as e:
        logger.error(f"Erreur handle_messages: {e}")

# D√©marrage serveur web
async def start_web_server():
    """D√©marre le serveur web pour Render.com"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_get('/status', bot_status_endpoint)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"‚úÖ Serveur web d√©marr√© sur 0.0.0.0:{PORT}")

async def main():
    """Fonction principale"""
    try:
        logger.info("üöÄ D√©marrage Bot Pr√©diction v2024")
        
        # V√©rifier les variables d'environnement
        if not API_ID or not API_HASH or not BOT_TOKEN or not ADMIN_ID:
            logger.error("‚ùå Variables d'environnement manquantes!")
            return
            
        logger.info(f"‚úÖ Configuration: API_ID={API_ID}, ADMIN_ID={ADMIN_ID}, PORT={PORT}")
        
        # Initialiser YAML
        global yaml_manager
        yaml_manager = YAMLManager()
        init_database()
        logger.info("‚úÖ Gestionnaire YAML initialis√©")
        
        # Charger configuration
        load_config()
        
        # D√©marrer serveur web
        await start_web_server()
        
        # D√©marrer bot Telegram
        logger.info("üîó Connexion au bot Telegram...")
        await client.start(bot_token=BOT_TOKEN)
        
        me = await client.get_me()
        logger.info(f"‚úÖ Bot connect√©: @{me.username}")
        logger.info("üîÑ Bot en ligne et en attente de messages...")
        logger.info(f"üåê Acc√®s web: http://0.0.0.0:{PORT}")
        
        # Boucle principale
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())