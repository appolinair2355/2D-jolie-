#!/usr/bin/env python3
"""
üéØ Card Prediction Engine - Version deployer233332
üìä Moteur de pr√©diction optimis√© avec logging d√©taill√©
"""

import re
import random
import logging
from typing import Tuple, Optional, List

logger = logging.getLogger(__name__)

class CardPredictor:
    """Moteur de pr√©diction de cartes avec v√©rification des r√©sultats"""
    
    def __init__(self):
        self.last_predictions = []
        self.prediction_status = {}
        self.processed_messages = set()
        self.status_log = []
        self.prediction_messages = {}
        self.pending_edit_messages = {}
        
        # Syst√®me d√©clencheurs - num√©ros 7, 8
        self.trigger_numbers = {7, 8}
        
        logger.info("‚úÖ CardPredictor initialis√© avec d√©clencheurs: 7, 8")
        
    def reset(self):
        """R√©initialisation des donn√©es de pr√©diction"""
        self.last_predictions.clear()
        self.prediction_status.clear()
        self.processed_messages.clear()
        self.status_log.clear()
        self.prediction_messages.clear()
        self.pending_edit_messages.clear()
        logger.info("üîÑ Donn√©es pr√©diction r√©initialis√©es")

    def extract_game_number(self, message: str) -> Optional[int]:
        """Extraction num√©ro de jeu depuis message"""
        try:
            # Pattern #N suivi de chiffres
            match = re.search(r"#N\s*(\d+)\.?", message, re.IGNORECASE)
            if match:
                number = int(match.group(1))
                logger.debug(f"üî¢ Num√©ro extrait: {number}")
                return number
            
            # Pattern alternatif
            match = re.search(r"jeu\s*#?\s*(\d+)", message, re.IGNORECASE)
            if match:
                number = int(match.group(1))
                logger.debug(f"üî¢ Num√©ro alternatif extrait: {number}")
                return number
                
            return None
            
        except (ValueError, AttributeError) as e:
            logger.error(f"‚ùå Erreur extraction num√©ro: {e}")
            return None

    def extract_symbols_from_parentheses(self, message: str) -> List[str]:
        """Extraction symboles de cartes depuis parenth√®ses"""
        try:
            # Recherche groupes entre parenth√®ses
            matches = re.findall(r'\(([^)]+)\)', message)
            if matches:
                logger.debug(f"üÉè Groupes extraits: {matches}")
                return matches
            return []
            
        except Exception as e:
            logger.error(f"‚ùå Erreur extraction symboles: {e}")
            return []

    def count_card_symbols(self, text: str) -> int:
        """Comptage symboles de cartes (‚ô†Ô∏è, ‚ô•Ô∏è, ‚ô¶Ô∏è, ‚ô£Ô∏è)"""
        card_symbols = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', '‚ô†', '‚ô•', '‚ô¶', '‚ô£']
        count = sum(text.count(symbol) for symbol in card_symbols)
        logger.debug(f"üé¥ Symboles compt√©s: {count}")
        return count

    def normalize_suits(self, suits_str: str) -> str:
        """Normalisation et tri des couleurs de cartes"""
        # Mapping emoji vers versions simples
        suit_map = {
            '‚ô†Ô∏è': '‚ô†', '‚ô•Ô∏è': '‚ô•', '‚ô¶Ô∏è': '‚ô¶', '‚ô£Ô∏è': '‚ô£'
        }
        
        normalized = suits_str
        for emoji, simple in suit_map.items():
            normalized = normalized.replace(emoji, simple)
        
        # Extraction et tri symboles
        suits = [c for c in normalized if c in '‚ô†‚ô•‚ô¶‚ô£']
        result = ''.join(sorted(set(suits)))
        logger.debug(f"üî§ Couleurs normalis√©es: {result}")
        return result

    def should_predict(self, message: str) -> Tuple[bool, Optional[int], Optional[str]]:
        """D√©termine si une pr√©diction doit √™tre faite"""
        try:
            # Extraction num√©ro de jeu
            game_number = self.extract_game_number(message)
            if game_number is None:
                return False, None, None

            logger.info(f"üéØ Analyse jeu #{game_number}")

            # V√©rification si d√©j√† trait√©
            if game_number in self.prediction_status:
                logger.debug(f"‚è≠Ô∏è Jeu #{game_number} d√©j√† trait√©")
                return False, None, None

            # V√©rification d√©clencheurs (7, 8)
            last_digit = game_number % 10
            if last_digit not in self.trigger_numbers:
                logger.debug(f"üö´ Jeu #{game_number} ne d√©clenche pas (chiffre {last_digit})")
                return False, None, None

            logger.info(f"‚úÖ Jeu #{game_number} d√©clenche pr√©diction (chiffre {last_digit})")

            # Extraction symboles
            matches = self.extract_symbols_from_parentheses(message)
            if not matches:
                logger.debug("‚ùå Aucun symbole trouv√©")
                return False, None, None

            # Premier groupe de symboles
            first_group = matches[0]
            suits = self.normalize_suits(first_group)
            
            if not suits:
                logger.debug("‚ùå Aucune couleur valide")
                return False, None, None

            # V√©rification doublons
            message_hash = hash(message.strip())
            if message_hash in self.processed_messages:
                self.prediction_status[game_number] = 'd√©j√† trait√©'
                logger.debug(f"üîÑ Message #{game_number} d√©j√† trait√©")
                return False, None, None

            # Marquer comme trait√©
            self.processed_messages.add(message_hash)
            
            # Pr√©diction pour prochain round
            predicted_game = ((game_number // 10) + 1) * 10
            
            self.prediction_status[predicted_game] = '‚åõ'
            self.last_predictions.append((predicted_game, suits))
            
            logger.info(f"üéØ PR√âDICTION CR√â√âE: Jeu #{predicted_game} -> {suits} (bas√© sur #{game_number})")
            return True, predicted_game, suits

        except Exception as e:
            logger.error(f"‚ùå Erreur should_predict: {e}")
            return False, None, None

    def verify_prediction_offset_3(self, message: str, predicted_cards: str) -> Optional[str]:
        """V√©rification pr√©diction avec offset +3 uniquement"""
        try:
            logger.info(f"üîç V√©rification offset +3: {predicted_cards}")
            
            # Extraction groupes de symboles
            matches = self.extract_symbols_from_parentheses(message)
            if len(matches) < 2:
                logger.debug("‚ùå Pas assez de groupes pour v√©rification")
                return "‚ùå‚ùå"
            
            # V√©rification 2+2 cartes
            first_group_count = self.count_card_symbols(matches[0])
            second_group_count = self.count_card_symbols(matches[1])
            
            if first_group_count != 2 or second_group_count != 2:
                logger.debug(f"‚ùå Format non valide: {first_group_count}+{second_group_count} cartes")
                return "‚ùå‚ùå"
            
            # Normalisation couleurs pr√©dites
            predicted_suits = set(predicted_cards)
            
            # V√©rification dans les deux groupes
            for i, group in enumerate(matches):
                group_suits = set(self.normalize_suits(group))
                
                if predicted_suits.issubset(group_suits):
                    logger.info(f"‚úÖ Match trouv√© groupe {i+1}: {group_suits} contient {predicted_suits}")
                    return "‚úÖ3Ô∏è‚É£"
            
            logger.info(f"‚ùå Aucun match: pr√©dit {predicted_suits}, trouv√© {[self.normalize_suits(g) for g in matches]}")
            return "‚ùå‚ùå"
            
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification: {e}")
            return "‚ùå‚ùå"

    def get_prediction_stats(self) -> dict:
        """Statistiques des pr√©dictions"""
        try:
            total = len(self.status_log)
            if total == 0:
                return {'total': 0, 'success': 0, 'rate': 0.0}
            
            success = sum(1 for status in self.status_log if '‚úÖ' in status)
            rate = (success / total) * 100
            
            stats = {
                'total': total,
                'success': success,
                'rate': round(rate, 1)
            }
            
            logger.info(f"üìä Statistiques: {stats}")
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå Erreur calcul stats: {e}")
            return {'total': 0, 'success': 0, 'rate': 0.0}

    def generate_auto_prediction(self) -> Tuple[str, str]:
        """G√©n√©ration pr√©diction automatique avec couleurs al√©atoires"""
        try:
            # Couleurs disponibles
            suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
            
            # S√©lection al√©atoire 2 couleurs
            selected_suits = random.sample(suits, 2)
            
            # Format comme 2K/2K (couleurs al√©atoires)
            prediction = f"2{selected_suits[0]}/2{selected_suits[1]}"
            
            logger.info(f"üé≤ Pr√©diction auto g√©n√©r√©e: {prediction}")
            return prediction, ''.join(selected_suits)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration auto: {e}")
            return "2‚ô†/2‚ô•", "‚ô†‚ô•"

    def __str__(self):
        return f"CardPredictor(predictions={len(self.last_predictions)}, processed={len(self.processed_messages)})"